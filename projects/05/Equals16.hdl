CHIP Equals16 {
    IN a[16], b[16];
    OUT out; // 1 if a == b, else 0

    PARTS:
    Equals(a=a[0], b=b[0], out=o0);
    Equals(a=a[1], b=b[1], out=o1);
    Equals(a=a[2], b=b[2], out=o2);
    Equals(a=a[3], b=b[3], out=o3);
    Equals(a=a[4], b=b[4], out=o4);
    Equals(a=a[5], b=b[5], out=o5);
    Equals(a=a[6], b=b[6], out=o6);
    Equals(a=a[7], b=b[7], out=o7);
    Equals(a=a[8], b=b[8], out=o8);
    Equals(a=a[9], b=b[9], out=o9);
    Equals(a=a[10], b=b[10], out=o10);
    Equals(a=a[11], b=b[11], out=o11);
    Equals(a=a[12], b=b[12], out=o12);
    Equals(a=a[13], b=b[13], out=o13);
    Equals(a=a[14], b=b[14], out=o14);
    Equals(a=a[15], b=b[15], out=o15);

    // And16Way
    And(a=o0, b=o1, out=andout0);
    And(a=andout0, b=o2, out=andout1);
    And(a=andout1, b=o3, out=andout2);
    And(a=andout2, b=o4, out=andout3);
    And(a=andout3, b=o5, out=andout4);
    And(a=andout4, b=o6, out=andout5);
    And(a=andout5, b=o7, out=andout6);
    And(a=andout6, b=o8, out=andout7);
    And(a=andout7, b=o9, out=andout8);
    And(a=andout8, b=o10, out=andout9);
    And(a=andout9, b=o11, out=andout10);
    And(a=andout10, b=o12, out=andout11);
    And(a=andout11, b=o13, out=andout12);
    And(a=andout12, b=o14, out=andout13);
    And(a=andout13, b=o15, out=out);
}
